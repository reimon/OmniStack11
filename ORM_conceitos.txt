ORM (Object-Relational Mapper)

-   Abstração do banco de dados
-   Tabelas viram models

Tabelas users, companies, projects

viram Models: User.js, Company.js, Project.js


Manipulação dos dados

- Sem SQL (na maioria da vezes)
- Apenas código JavaScript

INSERT INTO users (name, email)
    VALUES (
        "Diego Fernandes",
        "diego@rocketseat.com.br"
    )

User.create({
    name:   "Diego Fernandes",
    email:  "diego@rocketseat.com.br"
})


SELECT *
    FROM users
WHERE email = "diego@rocketseat.com.br"
LIMIT 1

User.findOne({
    where: {
        email: 'diego@rocketseat.com.br'
    }
})


###################################################
MIGRATIONS

- Controle de versão para base de dados
- Cada arquivo contém instruções para criação, alteração ou remoção de tabelas e colunas;
- Mantém a base atualizada entre todos desenvolvedores do time e também no ambiente de produção;
- Cada arquivo é uma migration e sua ordenação ocorre por data;


module.exports = {
    up: (queryInterface, Sequelize) => {
        return queryInterface.createTable('users', {    // Instrução para criar uma nova tabela
            id: {
                allowNull: false,
                autoIncrement: true,
                primaryKey: true,
                type: Sequelize.INTEGER
            },
            name: {                         // criação de 3 campos com suas propriedades
                allowNull: false,           // o ID é a chave primária e auto incremental
                type: Sequelize.STRING
            },
            email: {
                allowNull: false,
                unique: true,
                type: Sequelize.STRING
            }
        })
    },

    down: (queryInterface, Sequelize) => {
        return queryInterface.dropTable('users')        // Instrução para deletar a tabela caso haja um rollback
    }
}

NÃO É POSSIVEL EDITAR UMA MIGRATION EM PRODUÇÃO, SE NECESSÁRIO MUDAR ALGO PRECISA CRIAR UMA NOVA

- é possivel desfazer uma migração se errarmos algo enquanto estivermos desenvolvendo a feature;
- depois que a migration foi enviada para outros devs ou para ambiente de produção ela JAMAIS poderá ser alterada,
uma nova deve ser criada;
- cada migration deve realizar alterações em apenas uma tabela, você pode criar várias migrations para
alterações maiores;


###################################################
Seeds

- População da base de dados para desenvolvimento;
- Muito utilizado para popular dados para testes;
- Executavel apenas por código;
- Jamais será utilizado em produção;
- Caso sejam dados que precisam ir para produção, a própria migration pode manipular dados das tabelas;


###################################################
Arquitetura MVC (Model, View, Controller)

Model:      o model armazena a abstração do banco, utilizado para manipular os dados contidos nas tabelas do banco.
            Não possuem responsabilidade sobre a regra de negócio da nossa aplicação.

Controller: O controller é o ponto de entrada das requisições da nossa aplicação, uma rota geralmente está
            associada diretamente com um método do controller. Podemos incluir a grande parte das regras de
            negócio da aplicação nos controllers (conforme a aplicação cresce podemos isolar as regras).

View:       A view é o retorno ao cliente, em aplicações que não utilizando o modelo de API REST isso pode ser
            um HTML, mas no nosso caso a view é apenas o nosso JSON que será retornado ao front-end e depois
            manipulado pelo ReactJS ou React Native.

A face de um controller

- Classes;
- Sempre retorna um JSON;
- Não chama outro controller/método
- Quando criar um novo controller:
    - quando tiver uma nova entidade na aplicação (entidade != model)
    - Apenas 5 métodos;
    - Estou falando da mesma entidade?

class UserController {

    index() {}      // Listagem de usuários

    show() {}       // Exibir um único usuário

    store() {}      // Cadastrar usuário

    update() {}     // Alterar usuário

    delete() {}     // Remover usuário

}